{
  "hash": "5f4676f3e3e093be47b411dd758979be",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R/Pharma Events\"\nformat: html\nengine: knitr\nfilters:\n  - shinylive\n---\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\n\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(bslib)\nlibrary(bsicons)\n\n# Load the talks CSV dataset\ntalks <- read.csv(\"https://rinpharma.github.io/data-pipelines/output/processed_talks.csv\")\n\nicon_types <- c(\n  \"Keynote\" = \"person-video\", \n  \"Talk\" = \"person-video3\", \n  \"Workshop\" = \"people\", \n  \"Coffee session\" = \"cup-hot\", \n  \"Schedule only\" = \"cup-hot\", \n  \"On-Demand\" = \"person-video3\"\n)\n\nui <- page_fluid(\ntags$head(\n  tags$style(HTML(\"\n    #event-items .item-outer {\n      padding: 0.5rem;\n      border-bottom: 0.5px solid #444;\n    }\n    #event-items .item-inner {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    #event-items .event-title {\n      font-weight: bold;\n      margin-bottom: 0.25rem;\n    }\n    #event-items .event-speaker {\n      color: #444;\n      font-size: 90%;\n    }\n  \"))),\n\n  layout_sidebar(\n    sidebar = sidebar(\n      selectInput(\n        \"event\", \"Select Event:\",\n        choices = sort(unique(talks$Event)),\n        selected = unique(talks$Event)[1]\n      ),\n      uiOutput(\"day_buttons\")\n    ),\n    uiOutput(\"schedule_ui\")\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Reactive subset by event\n  event_data <- reactive({\n    talks %>% filter(Event == input$event)\n  })\n  \n  # Available days in selected event\n  days <- reactive({\n    unique(event_data()$Date)\n  })\n  \n  # dynamically generate day filter buttons\n  output$day_buttons <- renderUI({\n    lapply(days(), function(d) {\n      actionButton(inputId = paste0(\"day_\", d), label = d, class = \"btn-primary m-0 rounded-3\")\n    })\n  })\n  \n  # track selected day\n  selected_day <- reactiveVal(NULL)\n  \n  # default day\n  observeEvent(days(), {\n    if (length(days()) > 0) selected_day(days()[1])\n  })\n  \n  # update when button clicked\n  observe({\n    lapply(days(), function(d) {\n      observeEvent(input[[paste0(\"day_\", d)]], {\n        selected_day(d)\n      })\n    })\n  })\n  \n  # schedule table\n  output$schedule_ui <- renderUI({\n    req(selected_day())\n    df <- event_data() %>% filter(Date == selected_day())\n    \n    if (nrow(df) == 0) {\n      return(HTML(\"<p>No sessions for this day.</p>\"))\n    }\n    \n    # Build rows with popovers\n    rows <- lapply(seq_len(nrow(df)), function(i) {\n      session <- df[i,]\n\n      if (session$Type %in% c(\"Keynote\", \"Talk\", \"Workshop\", \"Coffee session\", \"Schedule only\", \"On-Demand\")) {\n        type_icon <- bs_icon(icon_types[session$Type]) |> tooltip(session$Type)\n      } else {\n        type_icon <- bs_icon(\"app\") \n      }\n\n      ## Abstract icon\n      if (is.na(session$Abstract)) {\n        abstract_icon <- bs_icon(\"file-earmark-text\", color = \"#ccc\")\n      } else {\n        abstract_icon <- popover(\n          trigger = bs_icon(\"file-earmark-text\"),\n          title = \"Abstract\",\n          session$Abstract\n        )\n      }\n\n      ## YouTube icon\n      if (is.na(session$Video)) {\n        youtube_icon <- bs_icon(\"youtube\", color = \"#ccc\")\n      } else {\n        youtube_icon <- shiny::a(href = session$Video, target = \"_blank\", bs_icon(\"youtube\", color = \"#f00\"))\n      }\n\n      ## Presenter\n      if (is.na(session$Affiliation)) {\n        if (is.na(session$Speaker)) {\n          speaker <- \"\"\n        } else {\n          speaker <- session$Speaker\n        }\n      } else {\n      speaker <- paste0(session$Speaker, \" (\", session$Affiliation, \")\")\n      }\n\n      shiny::tags$div(\n        class = \"item-outer\",\n        div(class = \"item-inner\",\n          span(\n            span(class = \"me-2\", type_icon),\n            substr(session$Start, 1, 5)\n          ),\n          span(\n            span(class = \"me-2\", youtube_icon), \n            abstract_icon\n          )\n        ),\n        shiny::tags$div(class = \"event-title\", session$Title),\n        shiny::tags$div(class = \"event-speaker\", speaker)\n      )\n    })\n    \n    card(\n      card_header(paste(\"Schedule:\", selected_day())),\n      div(id = \"event-items\", class = \"list-group\", rows)\n    )\n    \n  })\n}\n\nshinyApp(ui, server)\n```",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}